name: 🦖 EM-Zilla CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  NPM_VERSION: '9.x'

jobs:
  # 🔍 Security & Quality Checks
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          npm audit --audit-level=moderate

      - name: 🔍 Snyk Security Scan
        uses: snyk/actions/node@v2
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 🚨 CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  # 🧪 Testing Suite
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 ESLint Code Quality
        run: |
          npm run lint
          npm run lint:security

      - name: 🧪 Run Unit Tests
        run: npm run test

      - name: 🛡️ Security Integrity Tests
        run: npm run test:security

      - name: 🔗 Integration Tests
        run: npm run test:integration

      - name: 📊 Test Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  # 🏗️ Build & Package
  build-production:
    name: 🏗️ Production Build
    runs-on: ubuntu-latest
    needs: test-suite
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔐 Generate Integrity Hashes
        run: npm run build:hashes

      - name: 🏗️ Build Production Bundle
        run: npm run build:obfuscate

      - name: 🔏 Sign Official Build
        run: npm run build:sign
        env:
          EM_ZILLA_RELEASE_KEY: ${{ secrets.EM_ZILLA_RELEASE_KEY }}

      - name: ✅ Verify Build Integrity
        run: npm run integrity:check

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: em-zilla-production-build
          path: |
            dist/
            build-reports/
          retention-days: 30

  # 🚀 Deploy to GitHub Pages
  deploy-pages:
    name: 🌐 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: em-zilla-production-build
          path: dist

      - name: 🏗️ Setup Pages
        uses: actions/configure-pages@v4

      - name: 📤 Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📢 Notify Deployment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🎉 EM-Zilla v${{ github.ref_name }} successfully deployed to GitHub Pages! \n\n🌐 **Live Demo**: https://${{ context.repo.owner }}.github.io/${{ context.repo.name }}\n📦 **Build Version**: ${{ github.sha }}\n🕒 **Deployed**: ${{ new Date().toISOString() }}'
            })

  # 🏷️ Create GitHub Release
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [build-production, deploy-pages]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: em-zilla-production-build
          path: release-package

      - name: 🏷️ Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.ref_name }}
          release_name: EM-Zilla v${{ github.ref_name }}
          body: |
            🦖 **EM-Zilla v${{ github.ref_name }}** - AI-Powered Arduino IDE

            ## 🚀 New Features
            - AI-powered code generation
            - PSP Vita-style interface
            - USB hardware detection
            - Enterprise security features

            ## 📦 Installation
            ```bash
            # Download from GitHub Releases
            # Or use the live demo:
            # https://${{ github.repository_owner }}.github.io/EM-Zilla
            ```

            ## 🔧 Changes
            ${{ github.event.head_commit.message }}

            ## 📋 Checks
            ✅ Security Audit Passed  
            ✅ All Tests Passed  
            ✅ Build Integrity Verified  
            ✅ Deployed to GitHub Pages

          files: |
            release-package/dist/*
            release-package/build-reports/*
          draft: false
          prerelease: false

  # 📱 PWA Validation
  pwa-validation:
    name: 📱 PWA Validation
    runs-on: ubuntu-latest
    needs: deploy-pages
    if: always()

    steps:
      - name: 🔍 Validate PWA
        uses: GoogleChromeLabs/pwa-helpers/validate-pwa@v1
        with:
          url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}

      - name: 📊 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './lighthouse.config.js'

  # 🎯 Dependency Updates
  dependency-updates:
    name: 📦 Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔄 Check for updates
        run: |
          npx npm-check-updates
          npx npm-audit-resolver

      - name: 📋 Create Update Issue
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const updates = execSync('npx npm-check-updates --json').toString();
            const updateCount = Object.keys(JSON.parse(updates)).length;
            
            if (updateCount > 0) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `📦 Dependency Updates Available (${updateCount} packages)`,
                body: `The following dependencies have updates available:\n\n\`\`\`json\n${updates}\n\`\`\``,
                labels: ['dependencies', 'automated']
              });
            }
